rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Goals rules
    match /goals/{goalId} {
      // Allow read if user is owner or is in sharedWith array
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.sharedWith.hasAny([{'email': request.auth.token.email}])
      );

      // Allow create if authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;

      // Allow update if user is owner or is in sharedWith array
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.sharedWith.hasAny([{'email': request.auth.token.email}])
      );

      // Allow delete only if user is owner
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Users rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Todos rules - Simplified
    match /todos/{todoId} {
      // Allow read if user is authenticated and either:
      // 1. The document doesn't exist yet (for queries)
      // 2. The user owns the document
      allow read: if isAuthenticated() && (
        resource == null ||
        resource.data.userId == request.auth.uid
      );

      // Allow create if user is authenticated and they're setting themselves as owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;

      // Allow update/delete if user owns the document
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Notifications rules
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated();
    }
  }
}